---
lightbox: true
---
# Wavelet transform {#sec-signal-wavelet}

With Wavelets we extend the concept of the Fourier analysis to general orthogonal bases.
This extensions is done in such a way that we can do a multi-resolution decomposition and thus partially overcome the uncertainty principal discussed before. 

Wavelets are both, local and orthogonal.
The whole family of a wavelet are generated by scaling and translating a _mother_ wavelet $\psi(t)$ as
$$
\psi_{a,b}(t) = \frac{1}{\sqrt{a}} \psi\left(\frac{t-b}{a}\right),
$$
where the parameters $a$ and $b$ are responsible for scaling and translating, respectively. 

The simplest example is the so called Haar wavelet.

::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exm-wavelet-haar}

## The Haar wavelet

The _mother_ wavelet is defined as the step function
$$
\psi(t) = 
\begin{cases}
\begin{array}{rl}
1, & \text{for}\, 0 \leq t \le \tfrac12\\ 
-1, & \text{for}\, \tfrac12 \leq t \le 1\\
0, & \text{else}
\end{array}
\end{cases}
$$


```{python}
#| label: fig-wavelet-haar
#| fig-cap: "Haar wavelets for the first two levels of multi resolution."
#| fig-subcap:
#|   - "Scaling 1 and translation 0."
#|   - "Scaling 1/2 and translation 0."
#|   - "Scaling 1/2 and translation 1/2."
#| layout-ncol: 1
#| code-fold: true
#| code-summary: "Show the code for the figure"
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
%config InlineBackend.figure_formats = ["svg"]

N = 1000
a, b = -0.25, 1.25
t = np.linspace(a, b, N, endpoint=False)
mother = lambda t: np.astype((t >= 0) & (t < 1/2), float) - np.astype((t >= 1/2) & (t < 1), float)
psi = lambda t, a, b: 1 / np.sqrt(a) * mother((t - b) / a)

plt.figure(0)
plt.plot(t, psi(t, 1, 0))
plt.xlabel("t")
plt.ylabel(r"$\psi_{1,0}$")
plt.gca().set_aspect(0.125)

plt.figure(1)
plt.plot(t, psi(t, 1/2, 0))
plt.xlabel("x")
plt.ylabel(r"$\psi_{\frac{1}{2}, 0}$")
plt.gca().set_aspect(0.125)

plt.figure(2)
plt.plot(t, psi(t, 1/2, 1/2))
plt.xlabel("t")
plt.ylabel(r"$\psi_{\frac{1}{2}, \frac{1}{2}}$")
plt.gca().set_aspect(0.125)

plt.show()
```

Note that the Haar wavelets are orthogonal and provide a hierarchical basis for a signal.
::::
:::

::: {.callout-tip appearance="simple" collapse="true" icon=false}
:::: {#exm-wavelet-maxicanhat}

## The Maxican hat wavelet

The _mother_ wavelet is defined as the is the negative normalized second derivative of a Gaussian function,
$$
\psi(t) = (1 - t)^2\, \mathrm{e}^{-\tfrac{t}{2}}
$$


```{python}
#| label: fig-wavelet-mexicanhat
#| fig-cap: "Mexican hat wavelets for the first two levels of multi resolution."
#| fig-subcap:
#|   - "Scaling 1 and translation 0."
#|   - "Scaling 1/2 and translation 0."
#|   - "Scaling 1/2 and translation 1/2."
#| layout-ncol: 1
#| code-fold: true
#| code-summary: "Show the code for the figure"
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
%config InlineBackend.figure_formats = ["svg"]

N = 1000
a, b = -5, 5
t = np.linspace(a, b, N, endpoint=False)
mother = lambda t, d: (1 - np.pow(t, 2)) * np.exp(-1/2 * np.pow(t, 2))
psi = lambda t, a, b: 1 / np.sqrt(a) * mother((t - b) / a, 2)

plt.figure(0)
plt.plot(t, psi(t, 1, 0))
plt.xlabel("t")
plt.ylabel(r"$\psi_{1,0}$")
plt.gca().set_aspect(1.5)

plt.figure(1)
plt.plot(t, psi(t, 1/2, 0))
plt.xlabel("x")
plt.ylabel(r"$\psi_{\frac{1}{2}, 0}$")
plt.gca().set_aspect(1.5)

plt.figure(2)
plt.plot(t, psi(t, 1/2, 1/2))
plt.xlabel("t")
plt.ylabel(r"$\psi_{\frac{1}{2}, \frac{1}{2}}$")
plt.gca().set_aspect(1.5)

plt.show()
```
::::
:::

If we have a wavelet $\psi$, we can generate a new wavelet by convolution
$$
\psi \ast \phi
$$,
for a bounded and integrable function $\phi$.

::: {.callout appearance="simple"}
:::: {#def-wavelet-cwt} 
## Continuous Wavelet Transform
The continuous wavelet transform is given by
$$
\mathcal{W}_\psi\{f\}(a, b) = \langle f, \psi_{a, b} \rangle = \int_{-\infty}^\infty f(t)\overline{\psi}_{a,b}\, \mathrm{d}t,
$$
this is only true for a bounded wavelet $\psi$
$$
C_\psi = \int_{-\infty}^\infty \frac{|\hat{\psi}(\tau)|^2}{|\tau|}\, \mathrm{d}\tau, 
$$
i.e. a wavelet with $C_\psi < \infty$.
In this case also the inverse transform exists and is defined as
$$
f(t) = \frac{1}{C_\psi} \int_{-\infty}^\infty \int_{-\infty}^\infty\mathcal{W}_\psi\{f\}(a, b)\psi_{a, b}(t)\frac{1}{a^2} \, \mathrm{d}a\, \mathrm{d}b,
$$
:::
::::

From the continuous wavelet transform we go on to the discrete wavelet transform as similar for the Fourier transforms we have seen we will hardly ever have the entire signal at hand for the transformation.

::: {.callout appearance="simple"}
:::: {#def-wavelet-dwt} 
## Discrete Wavelet Transform
The discrete wavelet transform is given by
$$
\mathcal{W}_\psi\{f\}(j, k) = \langle f, \psi_{j, k} \rangle = \int_{-\infty}^\infty f(t)\overline{\psi}_{j, k}\, \mathrm{d}t,
$$
where $\psi_{j, k}$ is a discrete family of wavelets
$$
\psi_{j, k}(t) = \frac{1}{a^j}\psi\left(\frac{t - k b}{a^j}\right).
$$
The inverse is than given by
$$
f(t) = \sum_{j,k = -\infty}^\infty \mathcal{W}_\psi\{f\}(j, k) \psi_{j, k}(t).
$$
Which is nothing else than expressing the function in the wavelet family. 
If this family of wavelets is orthogonal (as e.g. the Haar wavelet) it is possible to expand the function $f$ uniquely as they form a basis.
:::
::::

::: {.callout-note}

There also exists a _fast_ wavelet transform that reduces the computational complexity from $\mathcal{O}(N\log N)$ to $\mathcal{O}(N)$ by cleverly reusing parts of the inner product computation.
:::